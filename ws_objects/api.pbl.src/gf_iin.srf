$PBExportHeader$gf_iin.srf
global type gf_iin from function_object
end type

forward prototypes
global function boolean gf_iin (readonly any aa_value, readonly any aa_check[])
end prototypes

global function boolean gf_iin (readonly any aa_value, readonly any aa_check[]);/*
Method				:  FN_IIN (Global Function) 
Author				: Chris Pollach
Scope  				: Public
Extended			: No
Level					: Base'

Description			: Performs just like a DBMS's  IN command in SQL.
Behaviour			: Allows the PB developer to pass in two arguments. The first argument is used to check its value 
							with the value(s) passed INTO the 2nd argument. If there is a match, the function RETURNs a TRUE
							otherwise, it RETURNs a FALSE (not match).
							
Note					:  Retuns a Boolean TRUE/FALSE

Argument(s)			: 	any (ReadOnly)			-	aa_value
							any (ReadOnly)			-	aa_check   (array)
							
Throws				: N/A

RETURN Value		: new value

-----------------------------------------------------------  CopyRight ------------------------------------------------------------------
Copyright © 2015 by Software Tool & Die Inc, here in known as STD Inc.  All rights reserved.
Any distribution of the STD Foundation Classes (STD_FC) for InfoMaker, Appeon,
PowerBuilder® source code by other than STD, Inc. is prohibited.
-----------------------------------------------------------  Revisions -------------------------------------------------------------------
1.0 		Inital Version																		-	2015-05-28
*/

// Declarations

Integer		li_loop
Integer		li_max
String			ls_type
Boolean		lb_rc = False
ls_type		=	ClassName(aa_value)															// Get 1st arg's data type
li_max			=	UpperBound(aa_check[])														// Get # of 2nd Arg's.

For  li_loop = 1 To li_max																		// Loop thru data
	If  ClassName(aa_check[li_loop] )  <>  ls_type Then								// Data type match?
		Continue																								// NO=>Continue the loop!
	Else
		If  aa_check[li_loop]	=	aa_value Then												// YES=>Values Equal?
			lb_rc	=	 True																				// YES=>Set RC
			Exit																									// Exit the Loop!
		End If
	End If
Next

Return lb_rc 																						// RETURN RC to caller

end function

